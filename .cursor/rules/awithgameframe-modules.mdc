---
globs: Assets/Scripts/AwithGameFrame/**/*.cs
description: AwithGameFrame模块开发规范
---

# AwithGameFrame 模块开发规范

## 核心层 (Core)
- **BaseManager**: 单例管理器基类，提供线程安全实现
- **EventCenter**: 事件系统，支持泛型避免装箱拆箱
- **MonoManager**: Mono生命周期管理，提供协程支持
- **ResourcesManager**: 资源管理，支持同步/异步加载
- **PoolManager**: 对象池管理，优化性能
- **ScenesManager**: 场景管理，支持同步/异步加载

## 表现层模块
### UI模块 (AwithGameFrame.UI)
- **UIManager**: 面板管理，支持分层显示
- **BasePanel**: 面板基类，自动绑定UI组件

### 音频模块 (AwithGameFrame.Audio)
- **MusicManager**: 音频播放管理，支持BGM/SFX/Voice分类

### 输入模块 (AwithGameFrame.InputSystem)
- **InputManager**: 输入事件管理，避免与Unity.Input冲突

## 工具层 (Utils)
- **GameConstants**: 游戏常量定义，避免硬编码

## 模块开发原则
- 继承BaseManager<T>实现单例
- 使用EventCenter进行模块间通信
- 遵循单一职责原则
- 提供清晰的公共API
- 添加适当的错误处理

## 设计模式参考

### 何时使用配置类
- **复杂配置**: 当模块有多个相关配置项时
- **预设需求**: 需要提供不同环境预设时
- **运行时修改**: 需要支持运行时配置变更时

### 何时提取枚举
- **多处使用**: 枚举在多个文件中被引用
- **命名冲突**: 避免与Unity内置类型冲突
- **扩展性**: 枚举可能频繁扩展时

### 何时重构
- **代码重复**: 发现重复的配置逻辑
- **维护困难**: 配置分散难以管理
- **扩展困难**: 添加新功能需要修改多处代码

## 重构原则
- **具体问题具体分析**: 根据模块特点选择重构方案
- **渐进式重构**: 分步骤进行，保持编译通过
- **向后兼容**: 尽量保持现有API的兼容性
- **测试验证**: 重构后确保功能正常