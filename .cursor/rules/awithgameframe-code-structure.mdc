---
globs: *.cs
description: AwithGameFrame代码结构规范
---

# AwithGameFrame 代码结构规范

## 三包架构结构

### 包结构层次
```
AwithGameFrame/
├── Core/           # 核心包 - 零外部依赖的基础功能
├── Foundation/     # 基础包 - 核心包 + 基础功能实现
└── Extensions/     # 扩展包 - 基础包 + 扩展功能
```

### 命名空间规范
- **Core包**: `AwithGameFrame.Core`
- **Foundation包**: `AwithGameFrame.Foundation`
- **Extensions包**: `AwithGameFrame.Extensions`

## 文件结构顺序
```csharp
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using AwithGameFrame.Core;

namespace AwithGameFrame.{PackageName}.{ModuleName}
{
    /// <summary>
    /// 类注释
    /// </summary>
    public class ClassName : BaseClass
    {
        #region 字段
        // 字段定义
        #endregion

        #region 属性
        // 属性定义
        #endregion

        #region 构造函数
        // 构造函数
        #endregion

        #region 公共方法
        // 公共方法
        #endregion

        #region 私有方法
        // 私有方法
        #endregion
    }
}
```

## 包内模块组织

### Core包模块
```
Core/
├── Base/           # 基础类
├── Event/          # 事件系统
├── Interfaces/     # 接口定义
├── Mono/           # Mono管理
├── Pool/           # 对象池管理
├── Scene/          # 场景管理
└── Utils/          # 核心工具
```

### Foundation包模块
```
Foundation/
├── DataPersistence/  # 数据持久化
├── Logging/          # 日志系统
├── Providers/        # 提供者管理
├── Resource/         # 资源管理
├── Systems/          # 基础系统
│   ├── Audio/        # 音频系统
│   ├── Input/        # 输入系统
│   └── UI/           # UI系统
└── Examples/         # 使用示例
```

### Extensions包模块
```
Extensions/
└── Tests/           # 测试工具
```

## 注释规范
- 类注释: 使用XML文档注释 `/// <summary>`
- 方法注释: 包含参数和返回值说明
- 复杂逻辑: 添加行内注释说明

## 代码组织
- 使用#region组织代码块
- 相关功能集中在一起
- 公共方法在前，私有方法在后
- 保持代码整洁和可读性

## 单例模式实现
- 继承BaseManager<T>基类
- 使用线程安全的双重检查锁定
- 提供GetInstance()静态方法